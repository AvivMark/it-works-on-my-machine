name: Deploy & Test
on:
  pull_request:
    types: [closed]
    branches: [ main, develop ]
  workflow_call:
    inputs:
      version:
        description: 'Version to deploy and test'
        required: true
        type: string
      environment:
        description: 'Environment to deploy to (staging, production)'
        required: false
        type: string
        default: 'staging'
  workflow_dispatch:
    inputs:
      version:
        description: 'Version to deploy and test'
        required: true
        type: string
      environment:
        description: 'Environment to deploy to (staging, production)'
        required: false
        type: string
        default: 'staging'
concurrency:
  group: cd-${{ github.ref }}
  cancel-in-progress: true

permissions:
  contents: read
  packages: read

env:
  NODE_VERSION: '20'

jobs:
  
  test-helm-chart-in-kind:
    runs-on: ubuntu-latest
    steps:
      - name: Checkout
        uses: actions/checkout@v4

      - name: Setup Node.js
        uses: actions/setup-node@v4
        with:
          node-version: ${{ env.NODE_VERSION }}

      - name: Setup Helm
        uses: azure/setup-helm@v4

      - name: Setup Kind
        uses: helm/kind-action@v1.10.0
        with:
          cluster_name: test-cluster
          kubectl_version: v1.29.0

      - name: Setup kubectl
        uses: azure/setup-kubectl@v4
        with:
          version: 'v1.29.0'

      - name: Verify Kind cluster
        run: |
          kubectl cluster-info
          kubectl get nodes

      - name: Load Docker image into Kind
        run: |
          PROJECT_NAME=$(node -p "require('./package.json').name")
          PROJECT_NAME_SAFE=$(echo "${PROJECT_NAME}" | tr '[:upper:]' '[:lower:]' | tr ' ' '-')
          REPO_OWNER=$(echo "$GITHUB_REPOSITORY" | cut -d'/' -f1)
          IMAGE_NAME="ghcr.io/${REPO_OWNER,,}/${PROJECT_NAME_SAFE}:${{ inputs.version }}"
          
          echo "Pulling image: $IMAGE_NAME"
          docker pull "$IMAGE_NAME" || echo "⚠️ Image not found, will use latest for testing"
          
          # If specific version not found, try latest for testing
          if ! docker pull "$IMAGE_NAME"; then
            IMAGE_NAME="ghcr.io/${REPO_OWNER,,}/${PROJECT_NAME_SAFE}:latest"
            echo "Falling back to: $IMAGE_NAME"
            docker pull "$IMAGE_NAME"
          fi
          
          # Load image into Kind cluster
          kind load docker-image "$IMAGE_NAME" --name test-cluster
          echo "IMAGE_NAME=$IMAGE_NAME" >> $GITHUB_ENV

      - name: Update Helm chart for testing
        run: |
          PROJECT_NAME=$(node -p "require('./package.json').name")
          CHART_DIR="charts/$PROJECT_NAME"
          
          # Update image tag in values.yaml for testing
          yq -i ".image.tag = \"${{ inputs.version }}\"" "$CHART_DIR/values.yaml"
          yq -i ".image.pullPolicy = \"Never\"" "$CHART_DIR/values.yaml"  # Use local image in Kind

      - name: Helm lint and template test
        run: |
          PROJECT_NAME=$(node -p "require('./package.json').name")
          CHART_DIR="charts/$PROJECT_NAME"
          
          echo "🔍 Linting Helm chart..."
          helm lint "$CHART_DIR"
          
          echo "🧪 Testing Helm template rendering..."
          helm template test-release "$CHART_DIR" --dry-run

      - name: Deploy to Kind cluster
        run: |
          PROJECT_NAME=$(node -p "require('./package.json').name")
          CHART_DIR="charts/$PROJECT_NAME"
          
          echo "Deploying to Kind cluster..."
          helm install test-release "$CHART_DIR" --wait --timeout=300s
          
          echo "Checking deployment status..."
          kubectl get all -l app.kubernetes.io/instance=test-release
          
          echo "Getting pod logs..."
          kubectl logs -l app.kubernetes.io/instance=test-release --tail=50

      - name: Run Helm tests
        run: |
          echo "Running Helm tests..."
          helm test test-release --timeout=180s

      - name: Cleanup test deployment
        if: always()
        run: |
          echo "🧹 Cleaning up test deployment..."
          helm uninstall test-release || true
          
      - name: Export test results
        if: always()
        run: |
          echo "📊 Exporting test results..."
          kubectl get events --sort-by=.metadata.creationTimestamp > kind-events.log
          kubectl describe pods -l app.kubernetes.io/instance=test-release > pod-descriptions.log || true
          
      - name: Upload test artifacts
        if: always()
        uses: actions/upload-artifact@v4
        with:
          name: kind-test-results-${{ inputs.version }}
          path: |
            kind-events.log
            pod-descriptions.log

  deploy:
    needs: test-helm-chart-in-kind
    if: inputs.environment == 'staging' || inputs.environment == 'production'
    runs-on: ubuntu-latest
    environment: ${{ inputs.environment }}
    steps:
      - name: Checkout
        uses: actions/checkout@v4

      - name: Setup Node.js
        uses: actions/setup-node@v4
        with:
          node-version: ${{ env.NODE_VERSION }}
     
      - name: Setup Helm
        uses: azure/setup-helm@v4
        
      - name: Install kubectl CLI
        uses: azure/setup-kubectl@v3
        with:
            version: '1.26.0'

      - name: Set Kubeconfig Context
        uses: azure/k8s-set-context@v3
        with:
          method: kubeconfig
          kubeconfig: ${{ secrets.KUBECONFIG }}

      - name: deployment to ${{ inputs.environment }}
        run: |
          helm upgrade --install "$RELEASE" "$CHART_PATH" \
            --namespace "${{ secrets.NAMESPACE }}" --create-namespace \
            --set image.repository=ghcr.io/${{ github.repository }} \
            --set image.tag=${{ github.sha }} \
            --wait --timeout 5m

          
      - name: Health check rollout
        run: |
          kubectl -n "${{ secrets.NAMESPACE }}" rollout status deploy/$RELEASE --timeout=120s
          
