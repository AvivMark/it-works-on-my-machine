name: CI
on:
  pull_request:
    branches:
      - main
      - develop
  push:
    branches:
      - '*'

permissions:
  contents: read
  packages: write

jobs:
  build:
    runs-on: ubuntu-latest
    steps:
      - name: checkout repo
        uses: actions/checkout@v4

      - name: use nodejs environment
        uses: actions/setup-node@v4
        with: 
          node-version: '20'
          cache: 'npm' 

      - name: Install dependencies
        run: npm ci
      
      - name: smoke tests
        run: |
          npm start &
          SERVER_PID=$!
          sleep 5
          ./scripts/smoke-test.sh
          kill $SERVER_PID
  test:
    runs-on: ubuntu-latest
    needs: build
    steps:
      - name: Checkout code
        uses: actions/checkout@v4

      - name: Setup Node.js environment
        uses: actions/setup-node@v4
        with: 
          node-version: '20'
          cache: 'npm'

      - name: Install dependencies
        run: npm install

      - name: Run tests with coverage
        run: npm run test:coverage -- --coverageReporters="json-summary" --coverageDirectory=coverage

      - name: Upload coverage artifact
        uses: actions/upload-artifact@v4
        with:
          name: coverage-report
          path: coverage

      - name: Enforce coverage threshold
        env:
          COVERAGE_THRESHOLD: ${{ env.COVERAGE_THRESHOLD || '80' }}
        run: |
          ./scripts/get_coverage.py

  lint:
    runs-on: ubuntu-latest
    steps:
      - name: Checkout code
        uses: actions/checkout@v4
        with:
          fetch-depth: 0
      
      - name: Run Super-Linter
        uses: github/super-linter@v6
        env:
          DEFAULT_BRANCH: main
          GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}
          VALIDATE_ALL_CODEBASE: false
          VALIDATE_JAVASCRIPT_ES: true
          IGNORE_GITIGNORED_FILES: true

  docker-build-publish:
    name: Build and publish Docker image
    runs-on: ubuntu-latest
    needs: build
    steps:
      - name: Checkout
        uses: actions/checkout@v4

      - name: Set up QEMU and buildx
        uses: docker/setup-buildx-action@v3

      - name: Log in to GitHub Container Registry
        uses: docker/login-action@v2
        with:
          registry: ghcr.io
          username: ${{ github.actor }}
          password: ${{ secrets.GITHUB_TOKEN }}

      - name: Determine image tags
        id: tagger
        run: |
          set -euo pipefail
          PROJECT_NAME=$(node -p "require('./package.json').name")
          PROJECT_NAME_SAFE=$(echo ${PROJECT_NAME} | tr '[:upper:]' '[:lower:]' | tr ' ' '-')
          REPO_OWNER=$(echo "$GITHUB_REPOSITORY" | cut -d'/' -f1)
          IMAGE_BASE="ghcr.io/${REPO_OWNER,,}/${PROJECT_NAME_SAFE}"
          BRANCH_NAME=${{ github.ref_name }}
          VERSION=$(node -p "require('./package.json').version")

          echo "tags<<EOF" >> $GITHUB_OUTPUT

          echo "${IMAGE_BASE}:${VERSION}" >> $GITHUB_OUTPUT
          echo "${IMAGE_BASE}:${GITHUB_SHA}" >> $GITHUB_OUTPUT
          if [ "${{ github.ref_name }}" -eq "main" ]; then
            echo "${IMAGE_BASE}:latest" >> $GITHUB_OUTPUT
          fi
          echo "EOF" >> $GITHUB_OUTPUT

      - name: Build and push image to GHCR
        uses: docker/build-push-action@v5
        with:
          push: true
          tags: ${{ steps.tagger.outputs.tags }}
          file: ./Dockerfile
      
      




    