name: CI
on:
  pull_request:
    branches:
      - main
      - develop
  push:
    branches:
      - '*'

permissions:
  contents: read
  packages: write

jobs:
  build:
    runs-on: ${{ matrix.os }}
    strategy:
      matrix:
          os: [ubuntu-latest]
          node-version: [18, 20]
    steps:
      - name: checkout repo
        uses: actions/checkout@v4

      - name: use nodejs environment
        uses: actions/setup-node@v4
        with: 
          node-version: ${{ matrix.node-version }}
          cache: 'npm' 

      - name: Install dependencies
        run: npm ci
      
      - name: smoke tests
        run: |
          npm start &
          SERVER_PID=$!
          sleep 5
          $GITHUB_WORKSPACE/scripts/smoke-test.sh
          kill $SERVER_PID
  test:
    runs-on: ${{ matrix.os }}
    strategy:
      matrix:
          os: [ubuntu-latest]
          node-version: [18, 20]
    needs: build
    steps:
      - name: Checkout code
        uses: actions/checkout@v4

      - name: Setup Node.js environment
        uses: actions/setup-node@v4
        with: 
          node-version: ${{ matrix.node-version }}
          cache: 'npm' 

      - name: Install dependencies
        run: npm ci

      - name: Run tests with coverage
        run: npm run test:coverage -- --coverageReporters="json-summary" --coverageDirectory=coverage

      - name: Upload coverage artifact
        uses: actions/upload-artifact@v4
        with:
          name: coverage-report-${{ matrix.node-version }}
          path: coverage

      - name: Setup Python environment
        uses: actions/setup-python@v4
        with:
          python-version: '3.x'

      - name: Enforce coverage threshold
        env:
          COVERAGE_THRESHOLD: ${{ env.COVERAGE_THRESHOLD || '80' }}
        run: |
          python .github/scripts/get_coverage.py

  lint:
    runs-on: ubuntu-latest
    steps:
      - name: Checkout code
        uses: actions/checkout@v4
        with:
          fetch-depth: 0
      
      - name: Run Super-Linter
        uses: github/super-linter@v6
        env:
          DEFAULT_BRANCH: main
          GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}
          VALIDATE_ALL_CODEBASE: false
          VALIDATE_JAVASCRIPT_ES: true
          IGNORE_GITIGNORED_FILES: true
  release:
    needs: [lint, test]
    if: github.event_name != 'pull_request'
    runs-on: ubuntu-latest
    strategy:
      matrix:
          os: [ubuntu-latest]
          node-version: [18, 20]
          
    steps:
      - uses: actions/checkout@v4
        with: { fetch-depth: 0 }

      - name: Semantic Release
        uses: ./
        id: semantic
        with:
          branches: |
            [
              '+([0-9])?(.{+([0-9]),x}).x',
              'master',
              'main',
              'next',
              'next-major',
              {
                name: 'beta',
                prerelease: true
              },
              {
                name: 'alpha',
                prerelease: true
              }
            ]
          extra_plugins: |
            @semantic-release/git
            @semantic-release/changelog
        env:
          GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}
      
      - uses: actions/setup-node@v4
        with:           
          node-version: ${{ matrix.node-version }}
          cache: 'npm'

      - run: npm ci
      
      - name: semantic-release
        env:
          GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}
        run: npx semantic-release

      - name: semantic-release (dry-run)
        if: github.event_name == 'pull_request'
        run: npx semantic-release --dry-run

  docker-build-publish:
    name: Build and publish Docker image
    runs-on: ubuntu-latest
    needs: [build, lint, test, release]
    steps:
      - name: Checkout
        uses: actions/checkout@v4

      - name: Set up QEMU and buildx
        uses: docker/setup-buildx-action@v3

      - name: Log in to GitHub Container Registry
        uses: docker/login-action@v2
        with:
          registry: ghcr.io
          username: ${{ github.actor }}
          password: ${{ secrets.GITHUB_TOKEN }}

      - name: Determine image tags
        id: tagger
        run: |
          set -euo pipefail
          PROJECT_NAME=$(node -p "require('./package.json').name")
          PROJECT_NAME_SAFE=$(echo ${PROJECT_NAME} | tr '[:upper:]' '[:lower:]' | tr ' ' '-')
          REPO_OWNER=$(echo "$GITHUB_REPOSITORY" | cut -d'/' -f1)
          IMAGE_BASE="ghcr.io/${REPO_OWNER,,}/${PROJECT_NAME_SAFE}"
          BRANCH_NAME=${{ github.ref_name }}
          VERSION=$(node -p "require('./package.json').version")

          echo "tags<<EOF" >> $GITHUB_OUTPUT

          echo "${IMAGE_BASE}:${VERSION}" >> $GITHUB_OUTPUT
          echo "${IMAGE_BASE}:${GITHUB_SHA}" >> $GITHUB_OUTPUT
          if [ "${{ github.ref_name }}" -eq "main" ]; then
            echo "${IMAGE_BASE}:latest" >> $GITHUB_OUTPUT
          fi
          echo "EOF" >> $GITHUB_OUTPUT

      - name: Build and push image to GHCR
        uses: docker/build-push-action@v5
        with:
          push: true
          tags: ${{ steps.tagger.outputs.tags }}
          file: ./Dockerfile
      
      




    