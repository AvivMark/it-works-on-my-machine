name: CI
on:
  pull_request:
    branches: [ main, develop ]
  push:
    branches: [ main, develop ]

# permissions needed for create realsees and push to ghcr
permissions:
  contents: write
  packages: write
  pull-requests: read

# define the coverage threshold for the rest of the build
env:
  COVERAGE_THRESHOLD: '80'
  NODE_VERSION: '20'
  OS: ubuntu-latest

jobs:
  
  build:
    runs-on: ubuntu-latest
    steps:
      - name: checkout repo
        uses: actions/checkout@v4
      - name: use nodejs environment
        uses: actions/setup-node@v4
        with: 
          node-version: ${{ env.NODE_VERSION }}
          cache: 'npm' 
      - name: Install dependencies
        run: npm ci
      - name: Smoke Tests
        run: |
          npm start &  SERVER_PID=$!
          sleep 5
          $GITHUB_WORKSPACE/scripts/smoke-test.sh
          kill $SERVER_PID || true

  test:
    runs-on: ubuntu-latest
    needs: build
    steps:
      - name: Checkout code
        uses: actions/checkout@v4
      - name: Setup Node.js environment
        uses: actions/setup-node@v4
        with: 
          node-version: ${{ env.NODE_VERSION }}
          cache: 'npm' 
      - name: Install dependencies
        run: npm ci
      - name: Run tests with coverage
        run: npm run test:coverage -- --coverageReporters="json-summary" --coverageDirectory=coverage
      - name: Upload coverage artifact
        uses: actions/upload-artifact@v4
        with:
          name: coverage-report-${{ env.NODE_VERSION }}
          path: coverage
      - name: Setup Python environment
        uses: actions/setup-python@v4
        with:
          python-version: '3.x'
      - name: Enforce coverage threshold
        env:
          COVERAGE_THRESHOLD: ${{ env.COVERAGE_THRESHOLD || '80' }}
        run: |
          python .github/scripts/get_coverage.py

  lint:
    runs-on: ubuntu-latest
    steps:
      - name: Checkout code
        uses: actions/checkout@v4
        with:
          fetch-depth: 0
      - name: Run Super-Linter
        uses: github/super-linter@v6
        env:
          DEFAULT_BRANCH: main
          GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}
          VALIDATE_ALL_CODEBASE: false
          VALIDATE_JAVASCRIPT_ES: true
          IGNORE_GITIGNORED_FILES: true
  
  release_dry_run:
    if: github.event_name == 'pull_request'
    runs-on: ubuntu-latest
    needs: [lint, test]
    steps:
      - uses: actions/checkout@v4
        with: { fetch-depth: 0 }
      - uses: actions/setup-node@v4
        with: 
          node-version: ${{ env.NODE_VERSION }}
          cache: 'npm' 
      - run: npm ci
      - name: semantic-release (dry-run)
        env: 
          GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }} 
        run: npx semantic-release --dry-run
  
  release:
    needs: [lint, test]
    if: github.event_name != 'pull_request'
    runs-on: ubuntu-latest
    steps:
      - uses: actions/checkout@v4
        with: { fetch-depth: 0 }
      - uses: actions/setup-node@v4
        with: 
          node-version: ${{env.NODE_VERSION}} 
          cache: 'npm'
      - run: npm ci
      - name: Semantic Release
        run: npx semantic-release
        env:
          GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}
      
      - uses: actions/setup-node@v4
        with:           
          node-version: ${{ matrix.node-version }}
          cache: 'npm'

      - run: npm ci
      
      - name: semantic-release
        env:
          GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}
        run: npx semantic-release

      - name: semantic-release (dry-run)
        if: github.event_name == 'pull_request'
        run: npx semantic-release --dry-run
          
  docker-build-publish:
    name: Build and publish Docker image
    runs-on: ubuntu-latest
    needs: [release]
    steps:
      - name: Checkout
        uses: actions/checkout@v4

      - name: Set up QEMU and buildx
        uses: docker/setup-buildx-action@v3

      - name: Log in to GitHub Container Registry
        uses: docker/login-action@v2
        with:
          registry: ghcr.io
          username: ${{ github.actor }}
          password: ${{ secrets.GITHUB_TOKEN }}

      - name: Docker meta
        id: meta
        uses: docker/metadata-action@v5
        with:
          images: ghcr.io/${{ github.repository }}
          tags: |
            type=raw,value={{tag}}
            type=sha
            type=raw,value=latest,enable=${{ github.ref == 'refs/heads/main' }}

      - name: Build & Push
        uses: docker/build-push-action@v6
        with:
          push: true
          context: .
          file: ./Dockerfile
          tags: ${{ steps.meta.outputs.tags }}
          labels: ${{ steps.meta.outputs.labels }}
      
      




    